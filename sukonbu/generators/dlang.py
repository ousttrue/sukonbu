import pathlib
from typing import List, Tuple, Optional
from ..json_schema import JsonSchema
from ..json_schema_parser import JsonSchemaParser


def generate(parser: JsonSchemaParser, dst: pathlib.Path) -> None:
    if not parser.root:
        return

    used: List[JsonSchema] = []
    schemas: List[Tuple[str, JsonSchema, Optional[JsonSchema]]] = []

    def traverse(name: str, js: JsonSchema, parent: Optional[JsonSchema]):
        for k, v in js.properties.items():
            traverse(k, v, js)
        if js.items:
            traverse('[]', js.items, js)
        if js not in used:
            schemas.append((name, js, parent))
            used.append(js)

    traverse('', parser.root, None)

    print(f'write: {dst}')
    with dst.open('w') as w:
        w.write('''// this is generated by sukonbu
# from typing import NamedTuple, List, Any, Optional, Dict
# from enum import Enum
# ''')


#         for key, js, parent in schemas:
#             enum_values = js.get_enum_values()
#             if enum_values:
#                 value_map = {
#                     'class_name':
#                     get_class_name(key, js, parent),
#                     'props': [enum_value(value) for value in enum_values],
#                     'reads':
#                     [read_func(k, v, js) for k, v in js.properties.items()]
#                 }
#                 w.write(PYTHON_ENUM.render(**value_map))

#             elif js.properties:
#                 props = [(
#                     v.description,
#                     f'{k}: {add_optional(js_to_pythontype(k, v, js), k in js.required)}'
#                 ) for k, v in js.properties.items()]
#                 value_map = {
#                     'class_name':
#                     js.get_class_name(),
#                     'props':
#                     sorted(props, key=lambda x: '=' in x[1]),
#                     'writes':
#                     [write_func(k, v, js) for k, v in js.properties.items()],
#                     'reads':
#                     [read_func(k, v, js) for k, v in js.properties.items()]
#                 }
#                 w.write(PYTHON_CLASS.render(**value_map))
